/**
 * VARS
 * (c) Andrew Wei
 *
 * Configuration for Gulp tasks.
 *
 * This software is released under the MIT License:
 * http://www.opensource.org/licenses/mit-license.php
 */

var path = require('path');
var $util = require('gulp-util');
var webpack = require('webpack');

var env = {
  watch: $util.env['watch'] || $util.env['w']
};

var paths = {
  base: path.join(__dirname, '../'),
  src: path.join(__dirname, '../', 'src'),
  dist: path.join(__dirname, '../', 'dist'),
  docs: path.join(__dirname, '../', 'docs'),
  test: path.join(__dirname, '../', 'test'),
  modules: path.join(__dirname, '../', 'node_modules')
};

var tasks = {
  clean: {
    input: [paths.dist, paths.docs]
  },
  build: {
    webpack: {
      pretty: {
        context: paths.src,
        entry: {
          vars: './vars.js'
        },
        output: {
          path: paths.dist,
          filename: 'vars.js',
          library: 'vars',
          libraryTarget: 'umd'
        },
        module: {
          loaders: [{
            test:  paths.src,
            loader: 'babel',
            query: {
              presets: ['es2015']
            }
          }]
        },
        plugins: [
          new webpack.DefinePlugin({ 'define.amd': false, 'process.browser': true })
        ]
      },
      ugly: {
        context: paths.src,
        entry: {
          vars: './vars.js'
        },
        output: {
          path: paths.dist,
          filename: 'vars.min.js',
          library: 'vars',
          libraryTarget: 'umd'
        },
        module: {
          loaders: [{
            test:  paths.src,
            loader: 'babel',
            query: {
              presets: ['es2015']
            }
          }]
        },
        plugins: [
          new webpack.DefinePlugin({ 'define.amd': false, 'process.browser': true }),
          new webpack.optimize.UglifyJsPlugin()
        ]
      }
    }
  },
  docs: {
    clean: paths.docs,
    input: paths.src,
    readme: path.join(paths.base, 'README.md'),
    config: path.join(paths.base, '.jsdocconfig')
  },
  watch: {
    build: [{
        files: path.join(paths.src, '**', '*.js'),
        tasks: [
          'build'
        ]
      }
    ]
  }
};

module.exports = {
  env: env,
  paths: paths,
  tasks: tasks
};
